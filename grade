#!/usr/bin/env bash

################################################################################
#
#                               Command Line Speed Grader
# Author       : Kyle Rader, WWU CS Graduate Teaching Assistant
# Created      : 28 Feb 2015
# Last Modified: 1 March 2015
#
# Description : This is a generic command line speed grader program
#                for compiling, testing, and reviewing Java
#                assignments from CSCI 145 - WWU CS.
################################################################################

set -e

remove='_*'
cd subs/

# This RAW Java file setup should not be required normally and will be removed
# in the future

# Setup people's raw java files
for file in $(ls *Han*.java) ; do
    student=${file%%$remove}

    mkdir -p $student
    mv $file $student/OrigHanoi.java
    cd $student
    perl -0777 -pe 's/class.*\n?{/class Hanoi {/g' OrigHanoi.java > Hanoi.java
    cd ../
done

# Setup people's raw fib files
for file in $(ls *Fib*.java) ; do
    student=${file%%$remove}

    mkdir -p $student
    mv $file $student/OrigFib.java
    cd $student
    perl -0777 -pe 's/class.*\n?{/class Fibonacci {/g' OrigFib.java > Fibonacci.java
    cd ../
done

# Setup zip files
for zip in *.zip ; do
    student=${zip%%$remove}
    zipNoSpace=${zip// /_}

    # Get rid of spaces in the zip folder name
    if [ "$zip" != "$zipNoSpace" ] ; then
  mv -f $student*.zip $zipNoSpace
    fi

    mkdir -p $student
    mv $zipNoSpace $student/orig.zip
    cd $student
    unzip orig.zip > /dev/null

    # Get MAC folder outa here
    rm -rf __MACOSX

    # find java files if there is another directory in here
    if [ "$(find -not -name . -type d | wc -l)" -ne "0" ]; then
  find -name '*.java' -exec mv {} ./ \;
  find -type d -not -name . -prune -exec rm -rf {} \;
    fi

    cd ../
done

echo "-- Setup done.  Ready to grade $(find -maxdepth 1 -type d -not -name . | wc -l) students. --"
echo

for student in `find -maxdepth 1 -type d -not -name .`; do

    echo "Grading $student :"

    cd $student

    # Fix java file names and class names
    ../../fix_file_names "OrigHanoi.java" ".*[Hh]an.*\.java" "Hanoi.java" 's/class.*\n?{/class Hanoi {/g' \
  "OrigFibonacci.java" ".*[Ff]ib.*\.java" "Fibonacci.java" 's/class.*\n?{/class Fibonacci {/g'


    echo "Compiling code..."
    # Ready to compile expected files and run tests.
    if [ -f Hanoi.java ]; then
  javac Hanoi.java &> Hanoi.err.txt
    fi
    if [ -f Fibonacci.java ]; then
  javac Fibonacci.java &> Fibonacci.err.txt
    fi

    # Test Fibonacci
    echo "Testing ... "
    if [ -e Fibonacci.class ]; then

  printf "No Args: %s\n" "$(timeout -k 2 2 java Fibonacci 2>> Fibonacci.err.txt)" >> Fibonacci.out.txt
  printf "Bad Arg: %s\n" "$(timeout -k 2 2 java Fibonacci five 2>> Fibonacci.err.txt)" >> Fibonacci.out.txt
  for (( i=0 ; i < 10 ; i++ )); do
      printf "i = $i : %s\n\n" "$(timeout -k 2 2 echo $i | java Fibonacci $i 2>> Fibonacci.err.txt)" >> Fibonacci.out.txt
  done
  echo " Fibonacci done... "

    fi


    # Test Hanoi
    if [ -e Hanoi.class ]; then

  printf "No Args: %s\n" "$(timeout -k 2 2 java Hanoi 2>> Hanoi.err.txt)" >> Hanoi.out.txt
  printf "Bad Arg: %s\n" "$(timeout -k 2 2 java Hanoi five 2>> Hanoi.err.txt)" >> Hanoi.out.txt
  for (( i=1 ; i < 4 ; i++ )); do
      printf "i = $i :\n%s\n\n" "$(timeout -k 2 2 echo $i | java Hanoi $i 2>> Hanoi.err.txt)" >> Hanoi.out.txt
  done
  echo " Hanoi done..."

    fi
    echo

    cd ../
done

echo
echo "-- Grading Complete --"
